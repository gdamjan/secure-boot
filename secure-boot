#! /usr/bin/make -f

# configuration:

ESP       := /boot
EFIDIR    := /EFI/Secure
EFIBOOTDEVICE :=

# deprecated, use KERNEL. for backward compatibility til 2.0
SUFFIX    := linux

SIGNER    := ArchSecureBoot
KERNEL    := ${SUFFIX}
VMLINUZ   := /boot/vmlinuz-${KERNEL}
INITRAMFS := /boot/initramfs-${KERNEL}.img
EFISTUB   := /usr/lib/systemd/boot/efi/linuxx64.efi.stub
UCODE     := /boot/intel-ucode.img
CMDLINE   := /etc/kernel/cmdline
DESTFILE  := secure-boot-${KERNEL}.efi
EFIBOOTMGR := efibootmgr
EFIBOOTLBL := SecureBoot ${KERNEL}
RSAKEYSIZE := 4096

-include /etc/secure-boot/config.mk

KEYSDIR   := /etc/secure-boot
BOOTDIR   := $(ESP)$(EFIDIR)
EFIDIRFAT := $(subst /,\,$(EFIDIR))
BUILDDIR  := $(shell mktemp -d /tmp/secure-boot.XXXXXX)

ifdef EFIBOOTDEVICE
EFIBOOTMGR += -d $(EFIBOOTDEVICE)
endif

.PHONY: default clean update install

default:
	@echo Make targets: install, update, gen-keys, enroll

clean:
	rm -rf $(BUILDDIR)

update:  $(BOOTDIR)/${DESTFILE}
install: update
	$(EFIBOOTMGR) -c -l '${EFIDIRFAT}\${DESTFILE}' -L '${EFIBOOTLBL}'

$(BOOTDIR)/${DESTFILE}: $(BUILDDIR)/combined-boot-signed.efi
	@mkdir -p $(BOOTDIR)
	cp $< $@


$(BUILDDIR)/cmdline.txt:
	@mkdir -p $(BUILDDIR)
	[ -f ${CMDLINE} ] && \
	    tr '\n' ' ' < ${CMDLINE} > $@ || \
	    cp /proc/cmdline $@

$(BUILDDIR)/initramfs.img: $(UCODE) $(INITRAMFS)
	@mkdir -p $(BUILDDIR)
	cat $^ > $@

$(BUILDDIR)/combined-boot.efi: $(BUILDDIR)/cmdline.txt $(BUILDDIR)/initramfs.img $(EFISTUB) /etc/os-release
	objcopy \
	        --add-section .osrel=/etc/os-release --change-section-vma .osrel=0x20000 \
	        --add-section .cmdline=$(BUILDDIR)/cmdline.txt --change-section-vma .cmdline=0x30000 \
	        --add-section .linux=$(VMLINUZ) --change-section-vma .linux=0x40000 \
	        --add-section .initrd=$(BUILDDIR)/initramfs.img --change-section-vma .initrd=0x3000000 \
	        $(EFISTUB) $@

$(BUILDDIR)/combined-boot-signed.efi: $(BUILDDIR)/combined-boot.efi $(KEYSDIR)/db.key
	sbsign --key $(KEYSDIR)/db.key --cert $(KEYSDIR)/db.crt --output $@ $<


.PHONY: build sign enroll gen-keys

build:   $(BUILDDIR)/combined-boot.efi
sign:    $(BUILDDIR)/combined-boot-signed.efi

enroll: gen-keys
	efi-updatevar -e -f $(KEYSDIR)/KEK.esl KEK
	efi-updatevar -e -f $(KEYSDIR)/db.esl db
	efi-updatevar -f $(KEYSDIR)/PK.auth PK

gen-keys: $(KEYSDIR)/PK.auth $(KEYSDIR)/KEK.auth $(KEYSDIR)/db.auth



####
#### key building - typically only once in a lifetime
####

$(KEYSDIR)/%.crt: $(KEYSDIR)/%.key;
$(KEYSDIR)/%.key: COMMONNAME = $(SIGNER) $(basename $(notdir $@))
$(KEYSDIR)/%.key:
	@mkdir -p $(KEYSDIR)
	openssl req -new -x509 -newkey rsa:${RSAKEYSIZE} -subj "/CN=$(COMMONNAME)/" \
	    -keyout $@ -out $(@:.key=.crt) -days 3650 -nodes -sha256

$(KEYSDIR)/uuid:
	uuidgen -r > $@

$(KEYSDIR)/%.esl: $(KEYSDIR)/%.key $(KEYSDIR)/uuid
	cert-to-efi-sig-list -g `cat $(KEYSDIR)/uuid` $(@:.esl=.crt) $@


$(KEYSDIR)/PK.auth: $(KEYSDIR)/PK.crt $(KEYSDIR)/PK.esl
	sign-efi-sig-list -k $(KEYSDIR)/PK.key -c $(KEYSDIR)/PK.crt PK $(KEYSDIR)/PK.esl $@

$(KEYSDIR)/KEK.auth: $(KEYSDIR)/PK.crt $(KEYSDIR)/KEK.esl
	sign-efi-sig-list -c $(KEYSDIR)/PK.crt -k $(KEYSDIR)/PK.key KEK $(KEYSDIR)/KEK.esl $@

$(KEYSDIR)/db.auth: $(KEYSDIR)/KEK.crt $(KEYSDIR)/db.esl
	sign-efi-sig-list -c $(KEYSDIR)/KEK.crt -k $(KEYSDIR)/KEK.key db $(KEYSDIR)/db.esl $@


.PRECIOUS: $(KEYSDIR)/%.key $(KEYSDIR)/%.crt $(KEYSDIR)/%.esl
.DEFAULT: default
